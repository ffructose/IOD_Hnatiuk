document.addEventListener("DOMContentLoaded", async function () {
    const evrTable = document.getElementById("sortableBestEvr");
    const userId = localStorage.getItem("user_id"); // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    if (!userId) {
        alert("‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ!");
        window.location.href = "login.html";
        return;
    }

    try {
        // 1Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ –µ–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const response = await fetch(`/evristics/user/${userId}`);
        let evristics = await response.json();

        if (!Array.isArray(evristics)) {
            throw new Error("–°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.");
        }

        evristics.sort((a, b) => a.place - b.place); // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –º—ñ—Å—Ü–µ–º
        evrTable.innerHTML = ""; // –û—á–∏—â–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é

        // –î–æ–¥–∞—î–º–æ –µ–≤—Ä–∏—Å—Ç–∏–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—é
        evristics.forEach(evristic => {
            const row = document.createElement("tr");
            row.setAttribute("data-id", evristic.evristic_id);
            row.setAttribute("draggable", "true"); // –î–æ–∑–≤–æ–ª—è—î–º–æ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
            row.innerHTML = `
                <td>${evristic.evristic_id}</td>
                <td>${evristic.description}</td>
            `;
            evrTable.appendChild(row);

            // –î–æ–¥–∞—î–º–æ –ø–æ–¥—ñ—ó –¥–ª—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
            row.addEventListener("dragstart", handleDragStart);
            row.addEventListener("dragover", handleDragOver);
            row.addEventListener("drop", handleDrop);
            row.addEventListener("dragend", handleDragEnd);
        });

        updateRowStyles(); // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∏–ª—ñ (–∑–æ–ª–æ—Ç–∏–π, —Å—Ä—ñ–±–Ω–∏–π, –±—Ä–æ–Ω–∑–æ–≤–∏–π)

    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –µ–≤—Ä–∏—Å—Ç–∏–∫:", error);
    }
});

// –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞, —â–æ –ø–µ—Ä–µ—Ç—è–≥—É—î—Ç—å—Å—è
let draggedRow = null;

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
 */
function handleDragStart(event) {
    draggedRow = event.target; // –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ —Ä—è–¥–æ–∫
    event.dataTransfer.effectAllowed = "move";
    event.dataTransfer.setData("text/html", event.target.innerHTML);
    event.target.style.opacity = "0.5";
}

/**
 * –î–æ–∑–≤–æ–ª—è—î –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ —ñ–Ω—à—ñ —Ä—è–¥–∫–∏
 */
function handleDragOver(event) {
    event.preventDefault();
    event.dataTransfer.dropEffect = "move";
}

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó `drop` ‚Äî –∑–º—ñ–Ω—é—î –ø–æ—Ä—è–¥–æ–∫ –µ–≤—Ä–∏—Å—Ç–∏–∫
 */
function handleDrop(event) {
    event.preventDefault();
    if (draggedRow && event.target.closest("tr")) {
        const targetRow = event.target.closest("tr");

        if (draggedRow !== targetRow) {
            let parent = targetRow.parentNode;
            let rows = Array.from(parent.children);
            let draggedIndex = rows.indexOf(draggedRow);
            let targetIndex = rows.indexOf(targetRow);

            if (draggedIndex > targetIndex) {
                parent.insertBefore(draggedRow, targetRow);
            } else {
                parent.insertBefore(draggedRow, targetRow.nextSibling);
            }

            updateRowStyles(); // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–ª—å–æ—Ä–∏
            saveEvristicOrder(localStorage.getItem("user_id")); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
        }
    }
}

/**
 * –û—á–∏—â—É—î —Å—Ç–∏–ª—ñ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
 */
function handleDragEnd(event) {
    event.target.style.opacity = "1";
}

/**
 * –û–Ω–æ–≤–ª—é—î —Å—Ç–∏–ª—ñ —Ç–æ–ø-3 –µ–≤—Ä–∏—Å—Ç–∏–∫
 */
function updateRowStyles() {
    let rows = document.querySelectorAll("#sortableBestEvr tr");
    rows.forEach(row => row.style.backgroundColor = ""); // –û—á–∏—â–∞—î–º–æ —Ñ–æ–Ω

    if (rows[0]) rows[0].style.backgroundColor = "gold";
    if (rows[1]) rows[1].style.backgroundColor = "silver";
    if (rows[2]) rows[2].style.backgroundColor = "#cd7f32";
}

/**
 * –ó–±–µ—Ä—ñ–≥–∞—î –Ω–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ –µ–≤—Ä–∏—Å—Ç–∏–∫ —É –±–∞–∑—ñ
 */
async function saveEvristicOrder(userId) {
    let rows = document.querySelectorAll("#sortableBestEvr tr");
    let places = [];

    rows.forEach((row, index) => {
        places.push({
            evristic_id: row.getAttribute("data-id"),
            place: index + 1 // –ù–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫
        });
    });

    try {
        const res = await fetch("/evristics/update", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ user_id: userId, places })
        });

        if (!res.ok) {
            throw new Error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–≤—Ä–∏—Å—Ç–∏–∫.");
        }

        console.log("‚úÖ –ï–≤—Ä–∏—Å—Ç–∏–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—ñ");

        // üîπ –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await fetch("/log-action", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ user_id: userId, action: "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—è–¥–∫—É –µ–≤—Ä–∏—Å—Ç–∏–∫" })
        });

    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ä—è–¥–∫—É –µ–≤—Ä–∏—Å—Ç–∏–∫:", error);
    }
}

document.addEventListener("DOMContentLoaded", async function () {
    const bestSongsTableBody = document.querySelector("#bestSongsTable tbody");

    try {
        const response = await fetch("/evristics/popular-songs");
        let songs = await response.json();

        if (!Array.isArray(songs)) {
            throw new Error("–°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.");
        }

        bestSongsTableBody.innerHTML = ""; // –û—á–∏—â–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º

        songs.forEach(song => {
            const row = document.createElement("tr");
            row.innerHTML = `
                <td>${song.song_id}</td>
                <td>${song.song_name} (${song.author})</td>
                <td>${song.first_place_count}</td>
                <td>${song.second_place_count}</td>
                <td>${song.third_place_count}</td>
            `;
            bestSongsTableBody.appendChild(row);
        });

    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –ø—ñ—Å–µ–Ω—å:", error);
        bestSongsTableBody.innerHTML = "<tr><td colspan='5'>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—ñ—Å–Ω—ñ.</td></tr>";
    }
});
document.addEventListener("DOMContentLoaded", async function () {
    const evristicTableBody = document.querySelector("#evristicTable tbody");

    try {
        const response = await fetch("/evristics/popular");
        let evristics = await response.json();

        if (!Array.isArray(evristics)) {
            throw new Error("–°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.");
        }

        evristicTableBody.innerHTML = ""; // –û—á–∏—â–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º

        evristics.forEach(evristic => {
            const row = document.createElement("tr");

            row.innerHTML = `
                <td>${evristic.evristic_id}</td>
                <td>${evristic.description}</td>
                <td>${evristic.place_1 || 0}</td>
                <td>${evristic.place_2 || 0}</td>
                <td>${evristic.place_3 || 0}</td>
                <td>${evristic.place_4 || 0}</td>
                <td>${evristic.place_5 || 0}</td>
                <td>${evristic.place_6 || 0}</td>
                <td>${evristic.place_7 || 0}</td>
                <td><button class="apply-btn" data-id="${evristic.evristic_id}">–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏</button></td>
                <td><button class="cancel-btn" data-id="${evristic.evristic_id}">–í—ñ–¥–º—ñ–Ω–∏—Ç–∏</button></td>
            `;

            evristicTableBody.appendChild(row);
        });

    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ –µ–≤—Ä–∏—Å—Ç–∏–∫:", error);
    }
});

document.addEventListener("DOMContentLoaded", function () {
    const evrSongTable = document.getElementById("evrSongTable").querySelector("tbody");
    const heuristicColumn = document.getElementById("heuristicColumn");
    let originalData = []; // –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –ø—ñ—Å–µ–Ω—å
    let appliedHeuristics = {}; // –ê–∫—Ç–∏–≤–Ω—ñ –µ–≤—Ä–∏—Å—Ç–∏–∫–∏

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
    async function loadSongsData() {
        try {
            const response = await fetch("/evristics/popular");
            const songs = await response.json();
            originalData = songs.map(song => ({ ...song })); // –ö–æ–ø—ñ—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
            updateTable(originalData);
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–µ–Ω—å:", error);
        }
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∑ –æ–±'—î–∫—Ç–∞–º–∏ –ø—ñ—Å–µ–Ω—å
    function updateTable(songs) {
        evrSongTable.innerHTML = "";
        songs.forEach(song => addSongRow(song));
    }

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—é
    function addSongRow(song) {
        const row = document.createElement("tr");
        row.setAttribute("data-id", song.song_id);

        row.innerHTML = `
            <td>${song.song_id}</td>
            <td>${song.song_name}</td>
            <td class="place-cell" data-place="1">${song.first_place}</td>
            <td class="place-cell" data-place="2">${song.second_place}</td>
            <td class="place-cell" data-place="3">${song.third_place}</td>
            <td class="heuristic-result" style="display: none;"></td>
        `;
        evrSongTable.appendChild(row);
    }

    // üîπ –§—É–Ω–∫—Ü—ñ—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –µ–≤—Ä–∏—Å—Ç–∏–∫–∏
    function applyHeuristic(heuristicId) {
        heuristicColumn.style.display = "table-cell"; // –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–æ–≤–ø–µ—Ü—å "–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –µ–≤—Ä–∏—Å—Ç–∏–∫"
        appliedHeuristics[heuristicId] = true; // –î–æ–¥–∞—î–º–æ –µ–≤—Ä–∏—Å—Ç–∏–∫—É —É —Å–ø–∏—Å–æ–∫ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏—Ö

        const rows = evrSongTable.querySelectorAll("tr");
        let filteredSongs = [];

        rows.forEach(row => {
            const songId = row.getAttribute("data-id");
            const firstPlace = parseInt(row.children[2].textContent) || 0;
            const secondPlace = parseInt(row.children[3].textContent) || 0;
            const thirdPlace = parseInt(row.children[4].textContent) || 0;
            const heuristicCell = row.children[5];

            let remove = false;

            switch (heuristicId) {
                case 1: // –í–∏–¥–∞–ª—è—î–º–æ –æ–±'—î–∫—Ç–∏, —è–∫—ñ —Ç—ñ–ª—å–∫–∏ –Ω–∞ 3 –º—ñ—Å—Ü—ñ
                    if (thirdPlace > 0 && firstPlace === 0 && secondPlace === 0) {
                        remove = true;
                        row.children[4].style.backgroundColor = "red"; // üî¥ –í–∏–¥—ñ–ª–µ–Ω–Ω—è —á–µ—Ä–≤–æ–Ω–∏–º
                    }
                    break;

                case 2:
                    // –õ–æ–≥—ñ–∫–∞ –µ–≤—Ä–∏—Å—Ç–∏–∫–∏ 2 (–∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ)
                    break;

                case 3:
                    // –õ–æ–≥—ñ–∫–∞ –µ–≤—Ä–∏—Å—Ç–∏–∫–∏ 3 (–∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ)
                    break;
            }

            if (!remove) {
                filteredSongs.push({
                    song_id: songId,
                    song_name: row.children[1].textContent
                });
                heuristicCell.textContent = "‚úÖ –ü—Ä–æ–π—à–ª–æ –µ–≤—Ä–∏—Å—Ç–∏–∫—É";
            } else {
                row.style.display = "none"; // –í–∏–¥–∞–ª—è—î–º–æ —Ä—è–¥–æ–∫
            }
        });

        updateFinalTable(filteredSongs);
    }

    // üîπ –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ (—â–æ –ø—Ä–æ–π—à–ª–æ –µ–≤—Ä–∏—Å—Ç–∏–∫—É)
    function updateFinalTable(filteredSongs) {
        let finalTable = document.getElementById("evrSongTable").querySelector("tbody");
        finalTable.innerHTML = "";

        filteredSongs.forEach(song => {
            const row = document.createElement("tr");
            row.innerHTML = `
                <td>${song.song_id}</td>
                <td>${song.song_name}</td>
                <td>‚úÖ –ü—Ä–æ–π—à–ª–æ –µ–≤—Ä–∏—Å—Ç–∏–∫—É</td>
            `;
            finalTable.appendChild(row);
        });
    }

    // üîπ –§—É–Ω–∫—Ü—ñ—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –µ–≤—Ä–∏—Å—Ç–∏–∫–∏
    function cancelHeuristic(heuristicId) {
        if (!appliedHeuristics[heuristicId]) return; // –Ø–∫—â–æ –µ–≤—Ä–∏—Å—Ç–∏–∫–∞ –Ω–µ –±—É–ª–∞ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∞, –Ω–µ —Ä–æ–±–∏–º–æ –Ω—ñ—á–æ–≥–æ

        delete appliedHeuristics[heuristicId]; // –í–∏–¥–∞–ª—è—î–º–æ –µ–≤—Ä–∏—Å—Ç–∏–∫—É –∑—ñ —Å–ø–∏—Å–∫—É –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏—Ö

        // –Ø–∫—â–æ –ø—ñ—Å–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—ó –µ–≤—Ä–∏—Å—Ç–∏–∫–∏ ‚Äì —Ö–æ–≤–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å
        if (Object.keys(appliedHeuristics).length === 0) {
            heuristicColumn.style.display = "none";
        }

        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
        updateTable(originalData);

        // –í–∏–¥–∞–ª—è—î–º–æ —á–µ—Ä–≤–æ–Ω–∏–π –∫–æ–ª—ñ—Ä –∫–ª—ñ—Ç–∏–Ω–æ–∫, —è–∫—â–æ –±—É–ª–∞ –µ–≤—Ä–∏—Å—Ç–∏–∫–∞ 1
        const rows = evrSongTable.querySelectorAll("tr");
        rows.forEach(row => {
            row.children[4].style.backgroundColor = ""; // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è —á–µ—Ä–≤–æ–Ω–∏–º
        });
    }

    // üîπ –î–æ–¥–∞—î–º–æ –ø–æ–¥—ñ—ó –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è/—Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –µ–≤—Ä–∏—Å—Ç–∏–∫
    document.addEventListener("click", function (event) {
        if (event.target.classList.contains("apply-heuristic")) {
            const heuristicId = parseInt(event.target.getAttribute("data-id"));
            applyHeuristic(heuristicId);
        }
        if (event.target.classList.contains("cancel-heuristic")) {
            const heuristicId = parseInt(event.target.getAttribute("data-id"));
            cancelHeuristic(heuristicId);
        }
    });

    loadSongsData();
});


