document.addEventListener("DOMContentLoaded", async function () {
    const evrTable = document.getElementById("sortableBestEvr");
    const userId = localStorage.getItem("user_id"); // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if (!userId) {
        alert("‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ!");
        window.location.href = "login.html";
        return;
    }

    try {
        // 1Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ –µ–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const response = await fetch(`/evristics/user/${userId}`);
        let evristics = await response.json();

        if (!Array.isArray(evristics)) {
            throw new Error("–°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.");
        }

        evristics.sort((a, b) => a.place - b.place); // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –º—ñ—Å—Ü–µ–º
        evrTable.innerHTML = ""; // –û—á–∏—â–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é

        // –î–æ–¥–∞—î–º–æ –µ–≤—Ä–∏—Å—Ç–∏–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—é
        evristics.forEach(evristic => {
            const row = document.createElement("tr");
            row.setAttribute("data-id", evristic.evristic_id);
            row.innerHTML = `
                <td>${evristic.evristic_id}</td>
                <td>${evristic.description}</td>
            `;
            evrTable.appendChild(row);
        });

        // 2Ô∏è‚É£ –†–æ–±–∏–º–æ —Ç–∞–±–ª–∏—Ü—é –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–æ—é (Sortable.js)
        new Sortable(evrTable, {
            animation: 150,
            ghostClass: "dragging",
            onEnd: async function () {
                updateRowStyles();
                await saveEvristicOrder(userId);
            }
        });

        updateRowStyles();

    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –µ–≤—Ä–∏—Å—Ç–∏–∫:", error);
    }
});

/**
 * –ó–º—ñ–Ω—é—î —Å—Ç–∏–ª—å —Ä—è–¥–∫—ñ–≤ (–∑–æ–ª–æ—Ç–∏–π, —Å—Ä—ñ–±–Ω–∏–π, –±—Ä–æ–Ω–∑–æ–≤–∏–π)
 */
function updateRowStyles() {
    let rows = document.getElementById("sortableBestEvr").getElementsByTagName("tr");
    for (let i = 0; i < rows.length; i++) {
        rows[i].style.backgroundColor = "";
    }
    if (rows[0]) rows[0].style.backgroundColor = "gold";
    if (rows[1]) rows[1].style.backgroundColor = "silver";
    if (rows[2]) rows[2].style.backgroundColor = "#cd7f32";
}

/**
 * –ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ä—è–¥–æ–∫ –µ–≤—Ä–∏—Å—Ç–∏–∫ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
 */
async function saveEvristicOrder(userId) {
    let rows = document.querySelectorAll("#sortableBestEvr tr");
    let places = [];

    rows.forEach((row, index) => {
        places.push({
            evristic_id: row.getAttribute("data-id"),
            place: index + 1 // –ù–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫
        });
    });

    try {
        const res = await fetch("/evristics/update", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ user_id: userId, places })
        });

        if (!res.ok) {
            throw new Error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–≤—Ä–∏—Å—Ç–∏–∫.");
        }

        console.log("‚úÖ –ï–≤—Ä–∏—Å—Ç–∏–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—ñ");

        // üîπ –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await fetch("/log-action", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ user_id: userId, action: "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—è–¥–∫—É –µ–≤—Ä–∏—Å—Ç–∏–∫" })
        });

    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ä—è–¥–∫—É –µ–≤—Ä–∏—Å—Ç–∏–∫:", error);
    }
}
