document.addEventListener("DOMContentLoaded", async function () {
    const evrTable = document.getElementById("sortableBestEvr");
    const userId = localStorage.getItem("user_id"); // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    if (!userId) {
        alert("‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ!");
        window.location.href = "login.html";
        return;
    }

    try {
        // 1Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ –µ–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const response = await fetch(`/evristics/user/${userId}`);
        let evristics = await response.json();

        if (!Array.isArray(evristics)) {
            throw new Error("–°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.");
        }

        evristics.sort((a, b) => a.place - b.place); // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –º—ñ—Å—Ü–µ–º
        evrTable.innerHTML = ""; // –û—á–∏—â–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é

        // –î–æ–¥–∞—î–º–æ –µ–≤—Ä–∏—Å—Ç–∏–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—é
        evristics.forEach(evristic => {
            const row = document.createElement("tr");
            row.setAttribute("data-id", evristic.evristic_id);
            row.setAttribute("draggable", "true"); // –î–æ–∑–≤–æ–ª—è—î–º–æ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
            row.innerHTML = `
                <td>${evristic.evristic_id}</td>
                <td>${evristic.description}</td>
            `;
            evrTable.appendChild(row);

            // –î–æ–¥–∞—î–º–æ –ø–æ–¥—ñ—ó –¥–ª—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
            row.addEventListener("dragstart", handleDragStart);
            row.addEventListener("dragover", handleDragOver);
            row.addEventListener("drop", handleDrop);
            row.addEventListener("dragend", handleDragEnd);
        });

        updateRowStyles(); // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∏–ª—ñ (–∑–æ–ª–æ—Ç–∏–π, —Å—Ä—ñ–±–Ω–∏–π, –±—Ä–æ–Ω–∑–æ–≤–∏–π)

    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –µ–≤—Ä–∏—Å—Ç–∏–∫:", error);
    }
});

// –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞, —â–æ –ø–µ—Ä–µ—Ç—è–≥—É—î—Ç—å—Å—è
let draggedRow = null;

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
 */
function handleDragStart(event) {
    draggedRow = event.target; // –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ —Ä—è–¥–æ–∫
    event.dataTransfer.effectAllowed = "move";
    event.dataTransfer.setData("text/html", event.target.innerHTML);
    event.target.style.opacity = "0.5";
}

/**
 * –î–æ–∑–≤–æ–ª—è—î –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ —ñ–Ω—à—ñ —Ä—è–¥–∫–∏
 */
function handleDragOver(event) {
    event.preventDefault();
    event.dataTransfer.dropEffect = "move";
}

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó `drop` ‚Äî –∑–º—ñ–Ω—é—î –ø–æ—Ä—è–¥–æ–∫ –µ–≤—Ä–∏—Å—Ç–∏–∫
 */
function handleDrop(event) {
    event.preventDefault();
    if (draggedRow && event.target.closest("tr")) {
        const targetRow = event.target.closest("tr");

        if (draggedRow !== targetRow) {
            let parent = targetRow.parentNode;
            let rows = Array.from(parent.children);
            let draggedIndex = rows.indexOf(draggedRow);
            let targetIndex = rows.indexOf(targetRow);

            if (draggedIndex > targetIndex) {
                parent.insertBefore(draggedRow, targetRow);
            } else {
                parent.insertBefore(draggedRow, targetRow.nextSibling);
            }

            updateRowStyles(); // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–ª—å–æ—Ä–∏
            saveEvristicOrder(localStorage.getItem("user_id")); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
        }
    }
}

/**
 * –û—á–∏—â—É—î —Å—Ç–∏–ª—ñ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
 */
function handleDragEnd(event) {
    event.target.style.opacity = "1";
}

/**
 * –û–Ω–æ–≤–ª—é—î —Å—Ç–∏–ª—ñ —Ç–æ–ø-3 –µ–≤—Ä–∏—Å—Ç–∏–∫
 */
function updateRowStyles() {
    let rows = document.querySelectorAll("#sortableBestEvr tr");
    rows.forEach(row => row.style.backgroundColor = ""); // –û—á–∏—â–∞—î–º–æ —Ñ–æ–Ω

    if (rows[0]) rows[0].style.backgroundColor = "gold";
    if (rows[1]) rows[1].style.backgroundColor = "silver";
    if (rows[2]) rows[2].style.backgroundColor = "#cd7f32";
}

/**
 * –ó–±–µ—Ä—ñ–≥–∞—î –Ω–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ –µ–≤—Ä–∏—Å—Ç–∏–∫ —É –±–∞–∑—ñ
 */
async function saveEvristicOrder(userId) {
    let rows = document.querySelectorAll("#sortableBestEvr tr");
    let places = [];

    rows.forEach((row, index) => {
        places.push({
            evristic_id: row.getAttribute("data-id"),
            place: index + 1 // –ù–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫
        });
    });

    try {
        const res = await fetch("/evristics/update", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ user_id: userId, places })
        });

        if (!res.ok) {
            throw new Error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–≤—Ä–∏—Å—Ç–∏–∫.");
        }

        console.log("‚úÖ –ï–≤—Ä–∏—Å—Ç–∏–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—ñ");

        // üîπ –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await fetch("/log-action", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ user_id: userId, action: "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—è–¥–∫—É –µ–≤—Ä–∏—Å—Ç–∏–∫" })
        });

    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ä—è–¥–∫—É –µ–≤—Ä–∏—Å—Ç–∏–∫:", error);
    }
}
