document.addEventListener("DOMContentLoaded", () => {
    const token = localStorage.getItem("token");
    const userLevelSpan = document.getElementById("userLevel");
    const protocolContainer = document.getElementById("protocolContainer");
    const protocolTableBody = document.querySelector("#protocolTable tbody");
    const songsPollContainer = document.getElementById("songsPoll");
    const songsPollTableBody = document.querySelector("#songsPollTable tbody");
    const adminBlock = document.getElementById("adminBlock");
    const usersTableBody = document.querySelector("#usersTable tbody");
    const clearProtocolButton = document.getElementById("clearProtocolButton");

    if (!token) {
        alert("‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ!");
        window.location.href = "login.html";
        return;
    }

    // –ó–∞–ø–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    fetch("/user/info", {
        headers: { "Authorization": `Bearer ${token}` }
    })
    .then(res => res.json())
    .then(data => {
        if (data.username) {
            userLevelSpan.textContent = data.level;

            // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á admin –∞–±–æ teacher, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é `Protocol`
            if (data.level === "admin" || data.level === "teacher") {
                protocolContainer.style.display = "block"; // –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

                fetch("/user/protocol", { headers: { "Authorization": `Bearer ${token}` } })
                .then(res => res.json())
                .then(protocolData => {
                    protocolTableBody.innerHTML = "";
                    protocolData.forEach(row => {
                        const tr = document.createElement("tr");
                        tr.innerHTML = `
                            <td>${row.protocol_id}</td>
                            <td>${row.user_id}</td>
                            <td>${row.action}</td>
                            <td>${new Date(row.time).toLocaleString()}</td>
                        `;
                        protocolTableBody.appendChild(tr);
                    });
                })
                .catch(err => console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ç–æ–∫–æ–ª—É:", err));

                // üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ `songsPoll`
                songsPollContainer.style.display = "block";

                fetch("/user/songs-poll", { headers: { "Authorization": `Bearer ${token}` } })
                .then(res => res.json())
                .then(songsData => {
                    songsPollTableBody.innerHTML = "";
                    songsData.forEach(row => {
                        const tr = document.createElement("tr");
                        tr.innerHTML = `
                            <td>${row.user_id}</td>
                            <td>${row.username}</td>
                            <td>${row.first_place || "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö"}</td>
                            <td>${row.second_place || "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö"}</td>
                            <td>${row.third_place || "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö"}</td>
                        `;
                        songsPollTableBody.appendChild(tr);
                    });
                })
                .catch(err => console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:", err));
            }

            // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω, –ø–æ–∫–∞–∑—É—î–º–æ `adminBlock`
            if (data.level === "admin") {
                adminBlock.style.display = "block";

                // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                fetch("/admin/users", { headers: { "Authorization": `Bearer ${token}` } })
                .then(res => res.json())
                .then(users => {
                    usersTableBody.innerHTML = "";
                    users.forEach(user => {
                        const tr = document.createElement("tr");
                        tr.innerHTML = `
                            <td>${user.id}</td>
                            <td>${user.username}</td>
                            <td>
                                <select onchange="changeUserLevel(${user.id}, this.value)">
                                    <option value="user" ${user.level === "user" ? "selected" : ""}>User</option>
                                    <option value="teacher" ${user.level === "teacher" ? "selected" : ""}>Teacher</option>
                                    <option value="admin" ${user.level === "admin" ? "selected" : ""}>Admin</option>
                                </select>
                            </td>
                            <td><button onclick="deleteUser(${user.id})">‚ùå –í–∏–¥–∞–ª–∏—Ç–∏</button></td>
                        `;
                        usersTableBody.appendChild(tr);
                    });
                })
                .catch(err => console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:", err));

                // –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–æ—Ç–æ–∫–æ–ª—É
                clearProtocolButton.addEventListener("click", async () => {
                    if (confirm("‚ö† –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª?")) {
                        const response = await fetch("/admin/clear-protocol", {
                            method: "DELETE",
                            headers: { "Authorization": `Bearer ${token}` }
                        });

                        if (response.ok) {
                            alert("‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª –æ—á–∏—â–µ–Ω–æ!");
                            protocolTableBody.innerHTML = "";
                        } else {
                            alert("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–æ—Ç–æ–∫–æ–ª—É.");
                        }
                    }
                });
            }
        } else {
            logout();
        }
    })
    .catch(() => logout());
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É
async function changeUserLevel(userId, newLevel) {
    const token = localStorage.getItem("token");
    await fetch(`/admin/change-level/${userId}`, {
        method: "PUT",
        headers: { "Authorization": `Bearer ${token}`, "Content-Type": "application/json" },
        body: JSON.stringify({ level: newLevel })
    });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function deleteUser(userId) {
    const token = localStorage.getItem("token");
    if (confirm("‚ö† –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞?")) {
        await fetch(`/admin/delete-user/${userId}`, {
            method: "DELETE",
            headers: { "Authorization": `Bearer ${token}` }
        });
        alert("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–¥–∞–ª–µ–Ω–∏–π.");
        location.reload();
    }
}
