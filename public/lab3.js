document.addEventListener("DOMContentLoaded", () => {
  Promise.all([
    fetch('/lab3/song-places').then(r => r.json()),
    fetch('/lab3/evrsongs').then(r => r.json())
  ])
    .then(([data, allowedSongIds]) => {

      const cont1 = document.getElementById('cont1_1');
      const cont2 = document.getElementById('cont1_2');

      // –û—Ç—Ä–∏–º—É—î–º–æ userIds —É —Ç–æ–º—É –ø–æ—Ä—è–¥–∫—É, —è–∫ –≤ –æ–±'—î–∫—Ç—ñ
      const userIds = Object.keys(data);

      // üß© –ú–∞—Ç—Ä–∏—Ü—è –ø—ñ—Å–µ–Ω—å: 3 —Ä—è–¥–∫–∏ (–º—ñ—Å—Ü—è), —Å—Ç–æ–≤–ø—Ü—ñ ‚Äî –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
      const matrixSongs = [[], [], []];

      const table1 = document.createElement('table');
      table1.border = "1";
      table1.style.borderCollapse = 'collapse';

      // –ó–∞–≥–æ–ª–æ–≤–æ–∫
      const headerRow1 = document.createElement('tr');
      userIds.forEach(userId => {
        const th = document.createElement('th');
        th.textContent = userId;
        headerRow1.appendChild(th);
      });
      table1.appendChild(headerRow1);

      // 3 —Ä—è–¥–∫–∏ (–º—ñ—Å—Ü—è)
      for (let i = 0; i < 3; i++) {
        const row = document.createElement('tr');
        userIds.forEach(userId => {
          const songId = data[userId][i] || '';
          if (allowedSongIds.includes(Number(songId))) {
            matrixSongs[i].push(songId);
          } else {
            matrixSongs[i].push('');
          }

          const td = document.createElement('td');
          td.textContent = songId;
          row.appendChild(td);
        });
        table1.appendChild(row);
      }

      cont1.appendChild(table1);

      // üßÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –∫–æ–∂–Ω–∞ –ø—ñ—Å–Ω—è –Ω–∞ —Ç–æ–º—É –∂ –º—ñ—Å—Ü—ñ
      const placeMaps = [{}, {}, {}]; // –¥–ª—è –º—ñ—Å—Ü—å 1, 2, 3

      userIds.forEach(userId => {
        for (let i = 0; i < 3; i++) {
          const songId = data[userId][i];
          if (songId) { // ‚ùóÔ∏è –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ allowedSongIds
            if (!placeMaps[i][songId]) {
              placeMaps[i][songId] = 0;
            }
            placeMaps[i][songId]++;
          }
        }
      });


      // üß© –ú–∞—Ç—Ä–∏—Ü—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: 4 —Ä—è–¥–∫–∏, —Å—Ç–æ–≤–ø—Ü—ñ ‚Äî –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
      const matrixStats = [[], [], [], []];

      const table2 = document.createElement('table');
      table2.border = "1";
      table2.style.borderCollapse = 'collapse';

      // –ó–∞–≥–æ–ª–æ–≤–æ–∫
      const headerRow2 = document.createElement('tr');
      userIds.forEach(userId => {
        const th = document.createElement('th');
        th.textContent = userId;
        headerRow2.appendChild(th);
      });
      table2.appendChild(headerRow2);

      // 3 —Ä—è–¥–∫–∏ ‚Äî –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –º—ñ—Å—Ü—è
      for (let i = 0; i < 3; i++) {
        const row = document.createElement('tr');
        userIds.forEach(userId => {
          const songId = data[userId][i];
          const count = songId ? placeMaps[i][songId] : '';
          matrixStats[i].push(count);
          const td = document.createElement('td');
          td.textContent = count;
          row.appendChild(td);
        });
        table2.appendChild(row);
      }

      // 4 —Ä—è–¥–æ–∫ ‚Äî —Å—É–º–∞ –ø–æ –∫–æ–∂–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
      const sumRow = document.createElement('tr');
      userIds.forEach(userId => {
        let sum = 0;
        for (let i = 0; i < 3; i++) {
          const songId = data[userId][i];
          if (songId && placeMaps[i][songId]) {
            sum += placeMaps[i][songId];
          }
        }
        matrixStats[3].push(sum);
        const td = document.createElement('td');
        td.textContent = sum;
        sumRow.appendChild(td);
      });
      table2.appendChild(sumRow);

      cont2.appendChild(table2);

      // üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –≤ –∫–æ–Ω—Å–æ–ª—ñ
      console.log("matrixSongs (–ø—ñ—Å–Ω—ñ):", matrixSongs);
      console.log("matrixStats (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞):", matrixStats);

      // –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ matrixSongs —ñ matrixStats –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –æ–±—á–∏—Å–ª–µ–Ω—å

      // üßÆ –ú–∞—Ç—Ä–∏—Ü—è —Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è
      const cont3 = document.getElementById('cont1_3');
      const table3 = document.createElement('table');
      table3.border = "1";
      table3.style.borderCollapse = 'collapse';

      // 1. –ó—ñ–±—Ä–∞—Ç–∏ –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ song_id –∑ matrixSongs
      const allSongIdsSet = new Set();
      matrixSongs.forEach(row => {
        row.forEach(songId => {
          if (songId) allSongIdsSet.add(Number(songId));
        });
      });
      const allSongIds = Array.from(allSongIdsSet)
        .filter(songId => allowedSongIds.includes(songId))
        .sort((a, b) => a - b);

      // 2. –ü–æ–±—É–¥–æ–≤–∞ header-—Ä—è–¥–∫–∞
      const headerRow3 = document.createElement('tr');
      const emptyHeader = document.createElement('th');
      emptyHeader.textContent = 'Song ID';
      headerRow3.appendChild(emptyHeader);
      userIds.forEach(userId => {
        const th = document.createElement('th');
        th.textContent = userId;
        headerRow3.appendChild(th);
      });
      table3.appendChild(headerRow3);

      // 3. –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Ç—Ä–∏—Ü—é —Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è
      const matrixRanks = []; // [ [songId, ...userValues], ... ]

      allSongIds.forEach(songId => {
        const row = document.createElement('tr');
        const labelCell = document.createElement('td');
        labelCell.textContent = songId;
        row.appendChild(labelCell);




        const songRow = [];

        userIds.forEach(userId => {
          let value = 0;
          for (let place = 0; place < 3; place++) {
            if (Number(data[userId][place]) === songId) {
              value = place + 1;
              break;
            }
          }
          const td = document.createElement('td');
          td.textContent = value;
          row.appendChild(td);
          songRow.push(value);
        });

        matrixRanks.push(songRow); // —Ç—ñ–ª—å–∫–∏ –∑–Ω–∞—á–µ–Ω–Ω—è, –±–µ–∑ songId
        table3.appendChild(row);
      });

      cont3.appendChild(table3);

      // üëÄ Debug
      console.log("matrixRanks (—Ä–∞–Ω–≥–∏ –∑–∞ –º–Ω–æ–∂–∏–Ω–Ω–∏–º–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è–º–∏):", matrixRanks);


      // üß© 4. –ü–æ–±—É–¥–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ –ø—ñ—Å–µ–Ω—å
      const cont5 = document.getElementById('cont1_5');
      const table5 = document.createElement('table');
      table5.border = "1";
      table5.style.borderCollapse = 'collapse';

      // –§—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞)
      function generatePermutations(arr) {
        const results = [];
        function permute(temp, remaining) {
          if (remaining.length === 0) {
            results.push(temp);
          } else {
            for (let i = 0; i < remaining.length; i++) {
              const next = remaining.slice();
              const curr = next.splice(i, 1);
              permute(temp.concat(curr), next);
            }
          }
        }
        permute([], arr);
        return results;
      }

      // –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—Å—ñ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö song_id
      const permutations = generatePermutations(allSongIds);

      // –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
      const headerRow5 = document.createElement('tr');
      allSongIds.forEach((_, idx) => {
        const th = document.createElement('th');
        th.textContent = `Pos ${idx + 1}`;
        headerRow5.appendChild(th);
      });
      table5.appendChild(headerRow5);

      // –î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∫ —Ä—è–¥–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ
      permutations.forEach(permutation => {
        const row = document.createElement('tr');
        permutation.forEach(songId => {
          const td = document.createElement('td');
          td.textContent = songId;
          row.appendChild(td);
        });
        table5.appendChild(row);
      });

      cont5.appendChild(table5);



      // üßÆ –û–±—á–∏—Å–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç–∞–Ω–µ–π –ö—É–∫–∞ + —Å—É–º–∞ —Ç–∞ –º–∞–∫—Å–∏–º—É–º
      const cont4 = document.getElementById('cont1_4');
      const table4 = document.createElement('table');
      table4.border = "1";
      table4.style.borderCollapse = 'collapse';

      // –ó–∞–≥–æ–ª–æ–≤–æ–∫
      const headerRow4 = document.createElement('tr');
      const firstTh = document.createElement('th');
      firstTh.textContent = 'Permutation';
      headerRow4.appendChild(firstTh);
      userIds.forEach(userId => {
        const th = document.createElement('th');
        th.textContent = `User ${userId}`;
        headerRow4.appendChild(th);
      });
      // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å—Ç–æ–≤–ø—Ü—ñ
      const sumTh = document.createElement('th');
      sumTh.textContent = 'Œ£ –í—ñ–¥—Å—Ç–∞–Ω–µ–π';
      headerRow4.appendChild(sumTh);

      const maxTh = document.createElement('th');
      maxTh.textContent = '–ú–∞–∫—Å –í—ñ–¥—Å—Ç–∞–Ω—å';
      headerRow4.appendChild(maxTh);

      table4.appendChild(headerRow4);

      // –ö–æ–∂–Ω–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ ‚Äî —è–∫ —Ä–∞–Ω–≥-–≤–µ–∫—Ç–æ—Ä (0, 1, 2, ...)
      permutations.forEach((perm, idx) => {
        const row = document.createElement('tr');

        const label = document.createElement('td');
        label.textContent = perm.join(', ');
        row.appendChild(label);

        let sum = 0;
        let max = 0;

        for (let j = 0; j < userIds.length; j++) {
          const expertRanks = matrixRanks.map(r => r[j]); // —Å—Ç–æ–≤–ø–µ—Ü—å j

          // –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤–µ–∫—Ç–æ—Ä —Ä–∞–Ω–≥—ñ–≤ –¥–ª—è —Ü—ñ—î—ó –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏
          const permAsRanks = [];
          for (let k = 0; k < expertRanks.length; k++) {
            const songId = allSongIds[k];
            const posInPerm = perm.indexOf(songId);
            permAsRanks.push(posInPerm + 1); // 1-based
          }

          // –í—ñ–¥—Å—Ç–∞–Ω—å –ö—É–∫–∞
          let distance = 0;
          for (let i = 0; i < expertRanks.length; i++) {
            distance += Math.abs(expertRanks[i] - permAsRanks[i]);
          }

          sum += distance;
          if (distance > max) max = distance;

          const td = document.createElement('td');
          td.textContent = distance;
          row.appendChild(td);
        }

        // –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Å—É–º–∫–∏
        const sumTd = document.createElement('td');
        sumTd.textContent = sum;
        row.appendChild(sumTd);

        const maxTd = document.createElement('td');
        maxTd.textContent = max;
        row.appendChild(maxTd);

        table4.appendChild(row);
      });

      cont4.appendChild(table4);



    })
    .catch(error => {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
    });
});