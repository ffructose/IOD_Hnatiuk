
document.addEventListener("DOMContentLoaded", async () => {
  try {
    const [data, allowedSongIds] = await Promise.all([
      fetch('/lab3/song-places').then(r => r.json()),
      fetch('/lab3/evrsongs').then(r => r.json())
    ]);

    const cont1 = document.getElementById('cont1_1');
    const cont2 = document.getElementById('cont1_2');

    // –û—Ç—Ä–∏–º—É—î–º–æ userIds —É —Ç–æ–º—É –ø–æ—Ä—è–¥–∫—É, —è–∫ –≤ –æ–±'—î–∫—Ç—ñ
    const userIds = Object.keys(data);

    // üß© –ú–∞—Ç—Ä–∏—Ü—è –ø—ñ—Å–µ–Ω—å: 3 —Ä—è–¥–∫–∏ (–º—ñ—Å—Ü—è), —Å—Ç–æ–≤–ø—Ü—ñ ‚Äî –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
    const matrixSongs = [[], [], []];

    const table1 = document.createElement('table');
    table1.border = "1";
    table1.style.borderCollapse = 'collapse';

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const headerRow1 = document.createElement('tr');
    userIds.forEach(userId => {
      const th = document.createElement('th');
      th.textContent = userId;
      headerRow1.appendChild(th);
    });
    table1.appendChild(headerRow1);

    // 3 —Ä—è–¥–∫–∏ (–º—ñ—Å—Ü—è)
    for (let i = 0; i < 3; i++) {
      const row = document.createElement('tr');
      userIds.forEach(userId => {
        const songId = data[userId][i] || '';
        if (allowedSongIds.includes(Number(songId))) {
          matrixSongs[i].push(songId);
        } else {
          matrixSongs[i].push('');
        }

        const td = document.createElement('td');
        td.textContent = songId;
        row.appendChild(td);
      });
      table1.appendChild(row);
    }

    cont1.appendChild(table1);

    // üßÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –∫–æ–∂–Ω–∞ –ø—ñ—Å–Ω—è –Ω–∞ —Ç–æ–º—É –∂ –º—ñ—Å—Ü—ñ
    const placeMaps = [{}, {}, {}]; // –¥–ª—è –º—ñ—Å—Ü—å 1, 2, 3

    userIds.forEach(userId => {
      for (let i = 0; i < 3; i++) {
        const songId = data[userId][i];
        if (songId) { // ‚ùóÔ∏è –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ allowedSongIds
          if (!placeMaps[i][songId]) {
            placeMaps[i][songId] = 0;
          }
          placeMaps[i][songId]++;
        }
      }
    });


    // üß© –ú–∞—Ç—Ä–∏—Ü—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: 4 —Ä—è–¥–∫–∏, —Å—Ç–æ–≤–ø—Ü—ñ ‚Äî –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
    const matrixStats = [[], [], [], []];

    const table2 = document.createElement('table');
    table2.border = "1";
    table2.style.borderCollapse = 'collapse';

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const headerRow2 = document.createElement('tr');
    userIds.forEach(userId => {
      const th = document.createElement('th');
      th.textContent = userId;
      headerRow2.appendChild(th);
    });
    table2.appendChild(headerRow2);

    // 3 —Ä—è–¥–∫–∏ ‚Äî –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –º—ñ—Å—Ü—è
    for (let i = 0; i < 3; i++) {
      const row = document.createElement('tr');
      userIds.forEach(userId => {
        const songId = data[userId][i];
        const count = songId ? placeMaps[i][songId] : '';
        matrixStats[i].push(count);
        const td = document.createElement('td');
        td.textContent = count;
        row.appendChild(td);
      });
      table2.appendChild(row);
    }

    // 4 —Ä—è–¥–æ–∫ ‚Äî —Å—É–º–∞ –ø–æ –∫–æ–∂–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    const sumRow = document.createElement('tr');
    userIds.forEach(userId => {
      let sum = 0;
      for (let i = 0; i < 3; i++) {
        const songId = data[userId][i];
        if (songId && placeMaps[i][songId]) {
          sum += placeMaps[i][songId];
        }
      }
      matrixStats[3].push(sum);
      const td = document.createElement('td');
      td.textContent = sum;
      sumRow.appendChild(td);
    });
    table2.appendChild(sumRow);

    cont2.appendChild(table2);

    // üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –≤ –∫–æ–Ω—Å–æ–ª—ñ
    console.log("matrixSongs (–ø—ñ—Å–Ω—ñ):", matrixSongs);
    console.log("matrixStats (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞):", matrixStats);

    // –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ matrixSongs —ñ matrixStats –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –æ–±—á–∏—Å–ª–µ–Ω—å

    // üßÆ –ú–∞—Ç—Ä–∏—Ü—è —Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è
    const cont3 = document.getElementById('cont1_3');
    const table3 = document.createElement('table');
    table3.border = "1";
    table3.style.borderCollapse = 'collapse';

    // 1. –ó—ñ–±—Ä–∞—Ç–∏ –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ song_id –∑ matrixSongs
    const allSongIdsSet = new Set();
    matrixSongs.forEach(row => {
      row.forEach(songId => {
        if (songId) allSongIdsSet.add(Number(songId));
      });
    });
    const allSongIds = Array.from(allSongIdsSet)
      .filter(songId => allowedSongIds.includes(songId))
      .sort((a, b) => a - b);

    // 2. –ü–æ–±—É–¥–æ–≤–∞ header-—Ä—è–¥–∫–∞
    const headerRow3 = document.createElement('tr');
    const emptyHeader = document.createElement('th');
    emptyHeader.textContent = 'Song ID';
    headerRow3.appendChild(emptyHeader);
    userIds.forEach(userId => {
      const th = document.createElement('th');
      th.textContent = userId;
      headerRow3.appendChild(th);
    });
    table3.appendChild(headerRow3);

    // 3. –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Ç—Ä–∏—Ü—é —Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è
    const matrixRanks = []; // [ [songId, ...userValues], ... ]

    allSongIds.forEach(songId => {
      const row = document.createElement('tr');
      const labelCell = document.createElement('td');
      labelCell.textContent = songId;
      row.appendChild(labelCell);




      const songRow = [];

      userIds.forEach(userId => {
        let value = 0;
        for (let place = 0; place < 3; place++) {
          if (Number(data[userId][place]) === songId) {
            value = place + 1;
            break;
          }
        }
        const td = document.createElement('td');
        td.textContent = value;
        row.appendChild(td);
        songRow.push(value);
      });

      matrixRanks.push(songRow); // —Ç—ñ–ª—å–∫–∏ –∑–Ω–∞—á–µ–Ω–Ω—è, –±–µ–∑ songId
      table3.appendChild(row);
    });

    cont3.appendChild(table3);

    // üëÄ Debug
    console.log("matrixRanks (—Ä–∞–Ω–≥–∏ –∑–∞ –º–Ω–æ–∂–∏–Ω–Ω–∏–º–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è–º–∏):", matrixRanks);


    // üß© 4. –ü–æ–±—É–¥–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ –ø—ñ—Å–µ–Ω—å
    const cont5 = document.getElementById('cont1_5');
    const table5 = document.createElement('table');
    table5.border = "1";
    table5.style.borderCollapse = 'collapse';

    // –§—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞)
    function generatePermutations(arr) {
      const results = [];
      function permute(temp, remaining) {
        if (remaining.length === 0) {
          results.push(temp);
        } else {
          for (let i = 0; i < remaining.length; i++) {
            const next = remaining.slice();
            const curr = next.splice(i, 1);
            permute(temp.concat(curr), next);
          }
        }
      }
      permute([], arr);
      return results;
    }

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—Å—ñ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö song_id
    const permutations = generatePermutations(allSongIds);

    // –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const headerRow5 = document.createElement('tr');
    allSongIds.forEach((_, idx) => {
      const th = document.createElement('th');
      th.textContent = `Pos ${idx + 1}`;
      headerRow5.appendChild(th);
    });
    table5.appendChild(headerRow5);

    // –î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∫ —Ä—è–¥–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ
    permutations.forEach(permutation => {
      const row = document.createElement('tr');
      permutation.forEach(songId => {
        const td = document.createElement('td');
        td.textContent = songId;
        row.appendChild(td);
      });
      table5.appendChild(row);
    });

    cont5.appendChild(table5);



    // üßÆ –û–±—á–∏—Å–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç–∞–Ω–µ–π –ö—É–∫–∞ + —Å—É–º–∞ —Ç–∞ –º–∞–∫—Å–∏–º—É–º
    const cont4 = document.getElementById('cont1_4');
    const table4 = document.createElement('table');
    table4.border = "1";
    table4.style.borderCollapse = 'collapse';

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const headerRow4 = document.createElement('tr');
    userIds.forEach(userId => {
      const th = document.createElement('th');
      th.textContent = userId;
      headerRow4.appendChild(th);
    });
    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å—Ç–æ–≤–ø—Ü—ñ
    const sumTh = document.createElement('th');
    sumTh.textContent = '–°—É–º–∞';
    headerRow4.appendChild(sumTh);

    const maxTh = document.createElement('th');
    maxTh.textContent = '–ú–∞–∫—Å';
    headerRow4.appendChild(maxTh);

    table4.appendChild(headerRow4);

    // –ö–æ–∂–Ω–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ ‚Äî —è–∫ —Ä–∞–Ω–≥-–≤–µ–∫—Ç–æ—Ä (0, 1, 2, ...)
    permutations.forEach((perm, idx) => {
      const row = document.createElement('tr');

      let sum = 0;
      let max = 0;

      for (let j = 0; j < userIds.length; j++) {
        const expertRanks = matrixRanks.map(r => r[j]); // —Å—Ç–æ–≤–ø–µ—Ü—å j

        // –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤–µ–∫—Ç–æ—Ä —Ä–∞–Ω–≥—ñ–≤ –¥–ª—è —Ü—ñ—î—ó –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏
        const permAsRanks = [];
        for (let k = 0; k < expertRanks.length; k++) {
          const songId = allSongIds[k];
          const posInPerm = perm.indexOf(songId);
          permAsRanks.push(posInPerm + 1); // 1-based
        }

        // –í—ñ–¥—Å—Ç–∞–Ω—å –ö—É–∫–∞ ‚Äî —è–∫ —É Excel
        let distance = 0;
        for (let i = 0; i < expertRanks.length; i++) {
          const expertRank = expertRanks[i];        // –∑ matrixRanks
          const songId = allSongIds[i];             // –ø—ñ—Å–Ω—è –Ω–∞ —Ü—ñ–π –ø–æ–∑–∏—Ü—ñ—ó
          const permRank = perm.indexOf(songId) + 1; // —Ä–∞–Ω–≥ —É –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤—Ü—ñ

          if (expertRank > 0 && permRank > 0) {
            distance += Math.abs(expertRank - permRank);
          }
        }


        sum += distance;
        if (distance > max) max = distance;

        const td = document.createElement('td');
        td.textContent = distance;
        row.appendChild(td);
      }

      // –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Å—É–º–∫–∏
      const sumTd = document.createElement('td');
      sumTd.textContent = sum;
      row.appendChild(sumTd);

      const maxTd = document.createElement('td');
      maxTd.textContent = max;
      row.appendChild(maxTd);

      table4.appendChild(row);
    });

    cont4.appendChild(table4);





    // –ó–±—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è cont1_6 —ñ cont1_7
    const cont6 = document.getElementById('cont1_6');
    const cont7 = document.getElementById('cont1_7');

    // 1Ô∏è‚É£ –ü–æ—à—É–∫ –º—ñ–Ω—ñ–º—É–º—ñ–≤ —É Œ£ —Ç–∞ –ú–∞–∫—Å
    let minSum = Infinity;
    let minMax = Infinity;

    let minSumPerms = [];
    let minMaxPerms = [];

    const resultRows = Array.from(table4.rows).slice(1); // –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫

    resultRows.forEach(row => {
      const cells = row.querySelectorAll('td');
      const distances = Array.from(cells).slice(0, userIds.length).map(td => Number(td.textContent));
      const sum = Number(cells[userIds.length].textContent);
      const max = Number(cells[userIds.length + 1].textContent);

      const songIds = Array.from(allSongIds); // —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫
      const permutation = [...permutations[resultRows.indexOf(row)]];

      // –î–ª—è —Å—É–º–∏
      if (sum < minSum) {
        minSum = sum;
        minSumPerms = [permutation];
      } else if (sum === minSum) {
        minSumPerms.push(permutation);
      }

      // –î–ª—è –º–∞–∫—Å–∏–º—É–º—É
      if (max < minMax) {
        minMax = max;
        minMaxPerms = [permutation];
      } else if (max === minMax) {
        minMaxPerms.push(permutation);
      }
    });


    // üìä –û–Ω–æ–≤–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –¥–ª—è cont1_6 ‚Äî –æ–±'—î–¥–Ω–∞–Ω–Ω—è minSumPerms + minMaxPerms –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—ñ–≤
    const table6 = document.createElement('table');
    table6.border = "1";
    table6.style.borderCollapse = 'collapse';

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const headerRow6 = document.createElement('tr');
    const thLabel = document.createElement('th');
    thLabel.textContent = '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è';
    headerRow6.appendChild(thLabel);
    allSongIds.forEach(songId => {
      const th = document.createElement('th');
      th.textContent = `ID ${songId}`;
      headerRow6.appendChild(th);
    });
    table6.appendChild(headerRow6);

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ, —â–æ –≤–∂–µ –¥–æ–¥–∞–ª–∏
    const seenPerms = new Set();

    // –î–æ–¥–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∑ minSumPerms
    minSumPerms.forEach(perm => {
      const key = perm.join(',');
      if (!seenPerms.has(key)) {
        seenPerms.add(key);

        const row = document.createElement('tr');
        const tdLabel = document.createElement('td');
        tdLabel.textContent = `–°—É–º–∞: ${minSum}`;
        row.appendChild(tdLabel);

        allSongIds.forEach(songId => {
          const td = document.createElement('td');
          td.textContent = perm.indexOf(songId) + 1;
          row.appendChild(td);
        });

        table6.appendChild(row);
      }
    });

    // –î–æ–¥–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∑ minMaxPerms
    minMaxPerms.forEach(perm => {
      const key = perm.join(',');
      if (!seenPerms.has(key)) {
        seenPerms.add(key);

        const row = document.createElement('tr');
        const tdLabel = document.createElement('td');
        tdLabel.textContent = `–ú–∞–∫—Å: ${minMax}`;
        row.appendChild(tdLabel);

        allSongIds.forEach(songId => {
          const td = document.createElement('td');
          td.textContent = perm.indexOf(songId) + 1;
          row.appendChild(td);
        });

        table6.appendChild(row);
      }
    });

    cont6.appendChild(table6);


    // üß© –ó—ñ–±—Ä–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑ minSumPerms —ñ minMaxPerms –¥–ª—è table7 —Ç–∞ table8
    const mergedPermsMap = new Map();

    minSumPerms.forEach(perm => {
      mergedPermsMap.set(perm.join(','), perm);
    });
    minMaxPerms.forEach(perm => {
      mergedPermsMap.set(perm.join(','), perm);
    });

    const mergedPerms = Array.from(mergedPermsMap.values());



    // üìä –¢–∞–±–ª–∏—Ü—è —Ä–∞–Ω–∂—É–≤–∞–Ω—å –¥–ª—è cont1_7
    const table7 = document.createElement('table');
    table7.border = "1";
    table7.style.borderCollapse = 'collapse';

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const headerRow7 = document.createElement('tr');

    allSongIds.forEach(songId => {
      const th = document.createElement('th');
      th.textContent = `ID ${songId}`;
      headerRow7.appendChild(th);
    });
    table7.appendChild(headerRow7);

    // –†—è–¥–∫–∏ –∑ —Ä–∞–Ω–≥–∞–º–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏
    mergedPerms.forEach(perm => {

      const row = document.createElement('tr');

      allSongIds.forEach(songId => {
        const td = document.createElement('td');
        td.textContent = perm.indexOf(songId) + 1; // –ø–æ–∑–∏—Ü—ñ—è + 1 = —Ä–∞–Ω–≥
        row.appendChild(td);
      });

      table7.appendChild(row);
    });

    cont7.appendChild(table7);


    // üìå cont1_8 ‚Äî –†–µ–∑—É–ª—å—Ç—É—é—á—ñ —Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è –∑–∞ –µ–≤—Ä–∏—Å—Ç–∏–∫–∞–º–∏ E1 —Ç–∞ E2
    const cont8 = document.getElementById('cont1_8');
    const table8 = document.createElement('table');
    table8.border = "1";
    table8.style.borderCollapse = 'collapse';

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const headerRow8 = document.createElement('tr');
    const thLabel1 = document.createElement('th');
    thLabel1.textContent = '–ú–µ—Ç–æ–¥';
    headerRow8.appendChild(thLabel1);
    allSongIds.forEach(songId => {
      const th = document.createElement('th');
      th.textContent = `ID ${songId}`;
      headerRow8.appendChild(th);
    });
    const thSum = document.createElement('th');
    thSum.textContent = 'Œ£ –≤—ñ–¥—Å—Ç–∞–Ω–µ–π';
    headerRow8.appendChild(thSum);
    const thMax = document.createElement('th');
    thMax.textContent = '–ú–∞–∫—Å –≤—ñ–¥—Å—Ç–∞–Ω—å';
    headerRow8.appendChild(thMax);

    table8.appendChild(headerRow8);

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç–∞–Ω–µ–π –ö—É–∫–∞
    function calculateCookDistances(perm) {
      let sum = 0;
      let max = 0;

      for (let j = 0; j < userIds.length; j++) {
        const expertRanks = matrixRanks.map(r => r[j]); // —Ä–∞–Ω–≥–∏ –µ–∫—Å–ø–µ—Ä—Ç–∞ j
        const permAsRanks = allSongIds.map(songId => perm.indexOf(songId) + 1);

        let distance = 0;
        for (let i = 0; i < expertRanks.length; i++) {
          distance += Math.abs(expertRanks[i] - permAsRanks[i]);
        }

        sum += distance;
        if (distance > max) max = distance;
      }

      return { sum, max };
    }

    // üîç –ü–æ—à—É–∫ –Ω–∞–π–∫—Ä–∞—â–∏—Ö –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∑–∞ E1 —ñ E2
    let bestE1 = null, bestE2 = null;
    let bestE1Value = Infinity, bestE2Value = Infinity;

    mergedPerms.forEach(perm => {
      const { sum, max } = calculateCookDistances(perm);

      if (sum < bestE1Value) {
        bestE1Value = sum;
        bestE1 = { perm, sum, max };
      }

      if (max < bestE2Value) {
        bestE2Value = max;
        bestE2 = { perm, sum, max };
      }
    });

    // üñäÔ∏è –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è E1
    if (bestE1) {
      const row = document.createElement('tr');
      const label = document.createElement('td');
      label.textContent = '–ï–≤—Ä–∏—Å—Ç–∏–∫–∞ E1 (–º—ñ–Ω. —Å—É–º–∞)';
      row.appendChild(label);

      allSongIds.forEach(songId => {
        const td = document.createElement('td');
        td.textContent = bestE1.perm.indexOf(songId) + 1;
        row.appendChild(td);
      });

      const tdSum = document.createElement('td');
      tdSum.textContent = bestE1.sum;
      row.appendChild(tdSum);

      const tdMax = document.createElement('td');
      tdMax.textContent = bestE1.max;
      row.appendChild(tdMax);

      table8.appendChild(row);
    }

    // üñäÔ∏è –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è E2
    if (bestE2) {
      const row = document.createElement('tr');
      const label = document.createElement('td');
      label.textContent = '–ï–≤—Ä–∏—Å—Ç–∏–∫–∞ E2 (–º—ñ–Ω. –º–∞–∫—Å)';
      row.appendChild(label);

      allSongIds.forEach(songId => {
        const td = document.createElement('td');
        td.textContent = bestE2.perm.indexOf(songId) + 1;
        row.appendChild(td);
      });

      const tdSum = document.createElement('td');
      tdSum.textContent = bestE2.sum;
      row.appendChild(tdSum);

      const tdMax = document.createElement('td');
      tdMax.textContent = bestE2.max;
      row.appendChild(tdMax);

      table8.appendChild(row);
    }

    cont8.appendChild(table8);

    // ‚è∫Ô∏è –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–º–ø—Ä–æ–º—ñ—Å–Ω–∏—Ö —Ä–∞–Ω–∂—É–≤–∞–Ω—å
    async function saveCompromise(method, data) {
      try {
        const response = await fetch("/lab3/compromise-rankings", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            method: method,
            rankings: data
          })
        });

        if (!response.ok) {
          throw new Error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è");
        }

        console.log(`‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –º–µ—Ç–æ–¥—É ${method}`);
      } catch (err) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –º–µ—Ç–æ–¥—É ${method}:`, err);
      }
    }

    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è E1
    if (bestE1) {
      const rankingsE1 = allSongIds.map(songId => ({
        song_id: songId,
        position: bestE1.perm.indexOf(songId) + 1,
        sum_distance: bestE1.sum,
        max_distance: bestE1.max
      }));
      await saveCompromise("E1", rankingsE1);
    }

    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è E2
    if (bestE2) {
      const rankingsE2 = allSongIds.map(songId => ({
        song_id: songId,
        position: bestE2.perm.indexOf(songId) + 1,
        sum_distance: bestE2.sum,
        max_distance: bestE2.max
      }));
      await saveCompromise("E2", rankingsE2);
    }

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
  }

});


