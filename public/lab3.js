document.addEventListener("DOMContentLoaded", () => {
    fetch('/lab3/song-places')
      .then(response => response.json())
      .then(data => {
        const cont1 = document.getElementById('cont1_1');
        const cont2 = document.getElementById('cont1_2');
  
        // –û—Ç—Ä–∏–º—É—î–º–æ userIds —É —Ç–æ–º—É –ø–æ—Ä—è–¥–∫—É, —è–∫ –≤ –æ–±'—î–∫—Ç—ñ
        const userIds = Object.keys(data);
  
        // üß© –ú–∞—Ç—Ä–∏—Ü—è –ø—ñ—Å–µ–Ω—å: 3 —Ä—è–¥–∫–∏ (–º—ñ—Å—Ü—è), —Å—Ç–æ–≤–ø—Ü—ñ ‚Äî –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
        const matrixSongs = [[], [], []];
  
        const table1 = document.createElement('table');
        table1.border = "1";
        table1.style.borderCollapse = 'collapse';
  
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        const headerRow1 = document.createElement('tr');
        userIds.forEach(userId => {
          const th = document.createElement('th');
          th.textContent = `User ${userId}`;
          headerRow1.appendChild(th);
        });
        table1.appendChild(headerRow1);
  
        // 3 —Ä—è–¥–∫–∏ (–º—ñ—Å—Ü—è)
        for (let i = 0; i < 3; i++) {
          const row = document.createElement('tr');
          userIds.forEach(userId => {
            const songId = data[userId][i] || '';
            matrixSongs[i].push(songId);
            const td = document.createElement('td');
            td.textContent = songId;
            row.appendChild(td);
          });
          table1.appendChild(row);
        }
  
        cont1.appendChild(table1);
  
        // üßÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –∫–æ–∂–Ω–∞ –ø—ñ—Å–Ω—è –Ω–∞ —Ç–æ–º—É –∂ –º—ñ—Å—Ü—ñ
        const placeMaps = [{}, {}, {}]; // –¥–ª—è –º—ñ—Å—Ü—å 1, 2, 3
        userIds.forEach(userId => {
          for (let i = 0; i < 3; i++) {
            const songId = data[userId][i];
            if (!placeMaps[i][songId]) {
              placeMaps[i][songId] = 0;
            }
            placeMaps[i][songId]++;
          }
        });
  
        // üß© –ú–∞—Ç—Ä–∏—Ü—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: 4 —Ä—è–¥–∫–∏, —Å—Ç–æ–≤–ø—Ü—ñ ‚Äî –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
        const matrixStats = [[], [], [], []];
  
        const table2 = document.createElement('table');
        table2.border = "1";
        table2.style.borderCollapse = 'collapse';
  
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        const headerRow2 = document.createElement('tr');
        userIds.forEach(userId => {
          const th = document.createElement('th');
          th.textContent = `User ${userId}`;
          headerRow2.appendChild(th);
        });
        table2.appendChild(headerRow2);
  
        // 3 —Ä—è–¥–∫–∏ ‚Äî –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –º—ñ—Å—Ü—è
        for (let i = 0; i < 3; i++) {
          const row = document.createElement('tr');
          userIds.forEach(userId => {
            const songId = data[userId][i];
            const count = songId ? placeMaps[i][songId] : '';
            matrixStats[i].push(count);
            const td = document.createElement('td');
            td.textContent = count;
            row.appendChild(td);
          });
          table2.appendChild(row);
        }
  
        // 4 —Ä—è–¥–æ–∫ ‚Äî —Å—É–º–∞ –ø–æ –∫–æ–∂–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        const sumRow = document.createElement('tr');
        userIds.forEach(userId => {
          let sum = 0;
          for (let i = 0; i < 3; i++) {
            const songId = data[userId][i];
            if (songId && placeMaps[i][songId]) {
              sum += placeMaps[i][songId];
            }
          }
          matrixStats[3].push(sum);
          const td = document.createElement('td');
          td.textContent = sum;
          sumRow.appendChild(td);
        });
        table2.appendChild(sumRow);
  
        cont2.appendChild(table2);
  
        // üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –≤ –∫–æ–Ω—Å–æ–ª—ñ
        console.log("matrixSongs (–ø—ñ—Å–Ω—ñ):", matrixSongs);
        console.log("matrixStats (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞):", matrixStats);
  
        // –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ matrixSongs —ñ matrixStats –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –æ–±—á–∏—Å–ª–µ–Ω—å
      })
      .catch(error => {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
      });
  });
  