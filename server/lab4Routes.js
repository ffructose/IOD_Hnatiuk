const express = require('express');
const router = express.Router();
const pool = require("./db");

// –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ—Å–Ω—ñ –∑–∞ –º—ñ—Å—Ü—è–º–∏ (1-3) –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.get('/song-places', async (req, res) => {
    try {
        const result = await pool.query(`
      SELECT user_id, place, song_id
      FROM SongPlace
      WHERE place IN (1, 2, 3)
      ORDER BY user_id, place
    `);

        const data = {};

        result.rows.forEach(row => {
            if (!data[row.user_id]) {
                data[row.user_id] = [];
            }
            data[row.user_id][row.place - 1] = row.song_id;
        });

        res.json(data);
    } catch (err) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ SongPlace:', err);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –î–æ–¥–∞–π –Ω–æ–≤–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è song_id –∑ evrsongs
router.get('/songnames', async (req, res) => {
    try {
        const result = await pool.query('SELECT song_name FROM evrsongs');
        const songNames = result.rows.map(row => row.song_name);
        res.json(songNames);
    } catch (err) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—ñ—Å–µ–Ω—å:', err);
        res.status(500).send('Server error');
    }
});

// –î–æ–¥–∞–π –Ω–æ–≤–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è song_id –∑ evrsongs
router.get('/evrsongs', async (req, res) => {
    try {
        const result = await pool.query('SELECT song_id FROM evrsongs');
        const songIds = result.rows.map(row => row.song_id);
        res.json(songIds);
    } catch (err) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—ñ—Å–µ–Ω—å:', err);
        res.status(500).send('Server error');
    }
});


// –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–º–ø—Ä–æ–º—ñ—Å–Ω—ñ —Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è (—É—Å—ñ –∞–±–æ –∑–∞ –º–µ—Ç–æ–¥–æ–º)
router.get('/compromise-rankings', async (req, res) => {
    try {
        const result = await pool.query(`
        SELECT method, song_id, position, sum_distance, max_distance
        FROM compromise_rankings
        ORDER BY method, position
      `);

        const data = { E1: [], E2: [] };

        result.rows.forEach(row => {
            if (row.method === 'E1') {
                data.E1.push(row);
            } else if (row.method === 'E2') {
                data.E2.push(row);
            }
        });

        res.json(data); // ‚ö†Ô∏è –Ω–µ res.json(result.rows), –∞ —Å–∞–º–µ data!
    } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ–º–ø—Ä–æ–º—ñ—Å–Ω–∏—Ö —Ä–∞–Ω–∂—É–≤–∞–Ω—å:', err);
        res.status(500).json({ error: 'Server error' });
    }
});


// –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å –¥–æ —Ç–∞–±–ª–∏—Ü—ñ Protocol
router.post("/log-action", async (req, res) => {
    const { user_id, action } = req.body;

    if (!user_id || !action) {
        return res.status(400).json({ error: "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ" });
    }

    try {
        await pool.query(
            "INSERT INTO Protocol (user_id, action, time) VALUES ($1, $2, NOW())",
            [user_id, action]
        );
        res.json({ message: "‚úÖ –î—ñ—è –∑–∞–ø–∏—Å–∞–Ω–∞ —É –ø—Ä–æ—Ç–æ–∫–æ–ª" });
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ—ó:", error);
        res.status(500).json({ error: "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

router.get("/info", async (req, res) => {
    const token = req.headers.authorization?.split(" ")[1];

    if (!token) {
        return res.status(401).json({ error: "‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" });
    }

    try {
        // üîπ –û—Ç—Ä–∏–º—É—î–º–æ user_id —á–µ—Ä–µ–∑ sessions
        const session = await pool.query("SELECT user_id FROM sessions WHERE token = $1", [token]);

        if (session.rows.length === 0) {
            return res.status(401).json({ error: "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω" });
        }

        const user = await pool.query("SELECT id, username, level FROM users WHERE id = $1", [session.rows[0].user_id]);

        if (user.rows.length === 0) {
            return res.status(401).json({ error: "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π" });
        }

        res.json(user.rows[0]);
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
        res.status(500).json({ error: "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

module.exports = router;
