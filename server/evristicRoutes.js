const express = require("express");
const client = require("./db");
const router = express.Router();

/**
 * 1Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ –µ–≤—Ä–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è)
 */
router.get("/user/:user_id", async (req, res) => {
    const userId = req.params.user_id;

    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ evristicPlace
        const existingRecords = await client.query("SELECT * FROM evristicPlace WHERE user_id = $1", [userId]);

        // –Ø–∫—â–æ –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ —ó—Ö
        if (existingRecords.rows.length === 0) {
            const evristics = await client.query("SELECT * FROM evristics");
            for (const evristic of evristics.rows) {
                await client.query("INSERT INTO evristicPlace (evristic_id, user_id, place) VALUES ($1, $2, $3)",
                    [evristic.evristic_id, userId, evristic.evristic_id]);
            }
        }

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –µ–≤—Ä–∏—Å—Ç–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userEvristics = await client.query(`
            SELECT evristicPlace.evristic_id, evristicPlace.place, evristics.description
            FROM evristicPlace
            JOIN evristics ON evristicPlace.evristic_id = evristics.evristic_id
            WHERE evristicPlace.user_id = $1
            ORDER BY evristicPlace.place ASC
        `, [userId]);

        res.json(userEvristics.rows);
    } catch (err) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–≤—Ä–∏—Å—Ç–∏–∫:", err);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

/**
 * 2Ô∏è‚É£ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—è–¥–∫—É –µ–≤—Ä–∏—Å—Ç–∏–∫
 */

router.post("/update", async (req, res) => {
    const { user_id, places } = req.body;

    if (!user_id || !places || !Array.isArray(places)) {
        return res.status(400).json({ error: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ" });
    }

    try {
        await client.query("BEGIN");

        for (const place of places) {
            // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ü–µ –µ–≤—Ä–∏—Å—Ç–∏–∫–∏
            const currentPlaceRes = await client.query(
                "SELECT place FROM evristicPlace WHERE user_id = $1 AND evristic_id = $2",
                [user_id, place.evristic_id]
            );

            const currentPlace = currentPlaceRes.rows[0]?.place;

            // –û–Ω–æ–≤–ª—é—î–º–æ –º—ñ—Å—Ü–µ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–æ–Ω–æ –∑–º—ñ–Ω–∏–ª–æ—Å—å
            if (currentPlace !== place.place) {
                await client.query(
                    "UPDATE evristicPlace SET place = $1 WHERE user_id = $2 AND evristic_id = $3",
                    [place.place, user_id, place.evristic_id]
                );

                // üîπ –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–∏ –≤ Protocol
                await client.query(
                    "INSERT INTO Protocol (user_id, action, time) VALUES ($1, $2, NOW())",
                    [user_id, `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –º—ñ—Å—Ü–µ –µ–≤—Ä–∏—Å—Ç–∏–∫–∏ ID ${place.evristic_id} –Ω–∞ ${place.place}`]
                );
            }
        }

        await client.query("COMMIT");
        res.json({ message: "‚úÖ –ü–æ—Ä—è–¥–æ–∫ –µ–≤—Ä–∏—Å—Ç–∏–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ" });

    } catch (error) {
        await client.query("ROLLBACK");
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–≤—Ä–∏—Å—Ç–∏–∫:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});


/**
 * 3Ô∏è‚É£ –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
router.post("/log-action", async (req, res) => {
    const { user_id, action } = req.body;

    if (!user_id || !action) {
        return res.status(400).json({ error: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ" });
    }

    try {
        await client.query(
            "INSERT INTO Protocol (user_id, action, time) VALUES ($1, $2, NOW())",
            [user_id, action]
        );
        res.json({ message: "‚úÖ –î—ñ—è –∑–∞–ø–∏—Å–∞–Ω–∞ —É –ø—Ä–æ—Ç–æ–∫–æ–ª" });
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ—ó:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ –ø—ñ—Å–Ω—ñ
router.get("/popular-songs", async (req, res) => {
    try {
        const query = `
            SELECT 
                sp.song_id,
                e.song_name,
                e.author,
                e.country,
                COUNT(CASE WHEN sp.place = 1 THEN 1 END) AS first_place_count,
                COUNT(CASE WHEN sp.place = 2 THEN 1 END) AS second_place_count,
                COUNT(CASE WHEN sp.place = 3 THEN 1 END) AS third_place_count
            FROM SongPlace sp
            JOIN EuroSongs e ON sp.song_id = e.song_id
            GROUP BY sp.song_id, e.song_name, e.author, e.country
        `;

        const result = await client.query(query);

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–æ–≤—ñ–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        const sortedSongs = sortPopularSongs(result.rows);

        res.json(sortedSongs);
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –ø—ñ—Å–µ–Ω—å:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// –î–æ–≤—ñ–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø—ñ—Å–µ–Ω—å –∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—é
function sortPopularSongs(songs) {
    return songs.sort((a, b) => {
        const scoreA = a.first_place_count * 3 + a.second_place_count * 2 + a.third_place_count * 1;
        const scoreB = b.first_place_count * 3 + b.second_place_count * 2 + b.third_place_count * 1;
        return scoreB - scoreA; // –í—ñ–¥ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏—Ö –¥–æ –º–µ–Ω—à –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö
    });
}
/**
 * üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–≤—Ä–∏—Å—Ç–∏–∫ –∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—é
 */
router.get("/popular", async (req, res) => {
    try {
        const result = await client.query(`
            SELECT e.evristic_id, e.description,
                COUNT(CASE WHEN ep.place = 1 THEN 1 END) AS place_1,
                COUNT(CASE WHEN ep.place = 2 THEN 1 END) AS place_2,
                COUNT(CASE WHEN ep.place = 3 THEN 1 END) AS place_3,
                COUNT(CASE WHEN ep.place = 4 THEN 1 END) AS place_4,
                COUNT(CASE WHEN ep.place = 5 THEN 1 END) AS place_5,
                COUNT(CASE WHEN ep.place = 6 THEN 1 END) AS place_6,
                COUNT(CASE WHEN ep.place = 7 THEN 1 END) AS place_7
            FROM evristics e
            LEFT JOIN evristicPlace ep ON e.evristic_id = ep.evristic_id
            GROUP BY e.evristic_id, e.description
            ORDER BY place_1 DESC, place_2 DESC, place_3 DESC, place_4 DESC, place_5 DESC, place_6 DESC, place_7 DESC;
        `);

        res.json(result.rows);
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ –µ–≤—Ä–∏—Å—Ç–∏–∫:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// üîÅ –û—á–∏—â–µ–Ω–Ω—è —Ç–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö —É EvrSongs
router.post("/evrsongs/reset", async (req, res) => {
    const { songs } = req.body;

    console.log("üì© –û—Ç—Ä–∏–º–∞–Ω–æ —Å–ø–∏—Å–æ–∫ –ø—ñ—Å–µ–Ω—å:", songs);

    if (!Array.isArray(songs)) {
        return res.status(400).json({ error: "songs –º–∞—î –±—É—Ç–∏ –º–∞—Å–∏–≤–æ–º" });
    }

    try {
        await client.query("DELETE FROM EvrSongs");

        for (const song of songs) {
            console.log(`üéµ –í—Å—Ç–∞–≤–∫–∞ –ø—ñ—Å–Ω—ñ:`, song);
            if (!song.songId || !song.songName) {
                console.log("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ø–æ–ª—ñ–≤", song);
                continue;
            }

            await client.query(
                "INSERT INTO EvrSongs (song_id, song_name) VALUES ($1, $2)",
                [song.songId, song.songName]
            );
        }

        res.status(200).json({ message: "EvrSongs –æ–Ω–æ–≤–ª–µ–Ω–æ" });
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ EvrSongs:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});


// üì• –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ EvrSongs
router.get("/evrsongs", async (req, res) => {
    try {
        const result = await client.query("SELECT song_name FROM EvrSongs");
        console.log("üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –ø—ñ—Å–Ω—ñ –∑ –±–∞–∑–∏:", result.rows);
        res.json(result.rows);
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ EvrSongs:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});


module.exports = router;
