const express = require("express");
const client = require("./db");
const router = express.Router();

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
// –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.get("/info", async (req, res) => {
    const token = req.headers.authorization?.split(" ")[1];

    if (!token) {
        return res.status(401).json({ error: "‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" });
    }

    try {
        // üîπ –û—Ç—Ä–∏–º—É—î–º–æ user_id —á–µ—Ä–µ–∑ sessions
        const session = await client.query("SELECT user_id FROM sessions WHERE token = $1", [token]);

        if (session.rows.length === 0) {
            return res.status(401).json({ error: "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω" });
        }

        const user = await client.query("SELECT id, username, level FROM users WHERE id = $1", [session.rows[0].user_id]);

        if (user.rows.length === 0) {
            return res.status(401).json({ error: "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π" });
        }

        res.json(user.rows[0]);
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
        res.status(500).json({ error: "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});


// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ `Protocol`
router.get("/protocol", async (req, res) => {
    try {
        const result = await client.query("SELECT * FROM Protocol ORDER BY time DESC");
        res.json(result.rows);
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Protocol:", error);
        res.status(500).json({ error: "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

module.exports = router;
