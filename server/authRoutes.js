const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const client = require('./db');

const router = express.Router();
const SECRET_KEY = process.env.SECRET_KEY;

// üîπ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º —É Protocol
router.post("/register", async (req, res) => {
    try {
        console.log("üîπ –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é:", req.body);
        const { username, password, full_name } = req.body;

        if (!username || !password || !full_name) {
            return res.status(400).json({ message: "‚ùå –í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ!" });
        }

        const userExists = await client.query("SELECT * FROM users WHERE username = $1", [username]);
        if (userExists.rows.length > 0) {
            return res.status(400).json({ message: "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î!" });
        }

        const hashedPassword = bcrypt.hashSync(password, 10);
        const hashedFullName = bcrypt.hashSync(full_name, 10); // –®–∏—Ñ—Ä—É—î–º–æ –ü–Ü–ë

        const result = await client.query(
            "INSERT INTO users (username, password, full_name, level) VALUES ($1, $2, $3, $4) RETURNING id, username, level",
            [username, hashedPassword, hashedFullName, "user"]
        );

        const user_id = result.rows[0].id;

        // –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —É Protocol
        await client.query(
            "INSERT INTO Protocol (user_id, action, time) VALUES ($1, $2, NOW())",
            [user_id, `–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ª–æ–≥—ñ–Ω: ${username}`]
        );

        console.log("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π:", result.rows[0]);
        res.json({ message: "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!", user: result.rows[0] });
    } catch (err) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", err);
        res.status(500).json({ error: "‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// üîπ –õ–æ–≥—ñ–Ω –∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º —É Protocol
// üîπ –õ–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º —Ç–æ–∫–µ–Ω–∞ –≤ sessions
router.post("/login", async (req, res) => {
    try {
        console.log("üîπ –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –≤—Ö—ñ–¥:", req.body);
        const { username, password } = req.body;

        if (!username || !password) {
            return res.status(400).json({ message: "‚ùå –í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ!" });
        }

        const user = await client.query("SELECT * FROM users WHERE username = $1", [username]);
        if (user.rows.length === 0) {
            return res.status(400).json({ message: "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å" });
        }

        const isValidPassword = bcrypt.compareSync(password, user.rows[0].password);
        if (!isValidPassword) {
            return res.status(400).json({ message: "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å" });
        }

        const token = jwt.sign(
            { user_id: user.rows[0].id, username: user.rows[0].username, level: user.rows[0].level },
            SECRET_KEY,
            { expiresIn: "1h" }
        );

        // üîπ –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π —Ç–æ–∫–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—è–∫—â–æ –≤—ñ–Ω —î)
        await client.query("DELETE FROM sessions WHERE user_id = $1", [user.rows[0].id]);

        // üîπ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω –≤ sessions
        await client.query("INSERT INTO sessions (user_id, token) VALUES ($1, $2)", [user.rows[0].id, token]);

        console.log("‚úÖ –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π –¥–ª—è:", username);
        res.json({ message: "‚úÖ –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π!", token, user_id: user.rows[0].id });

    } catch (err) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É:", err);
        res.status(500).json({ error: "‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});


module.exports = router;
